
VAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000ac4  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800108  00800108  00000b60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fca  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000047b  00000000  00000000  00001c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c18  00000000  00000000  000020e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f8  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b21  00000000  00000000  0000328c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003dad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 87 04 	jmp	0x90e	; 0x90e <__vector_14>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  68:	2f 02       	muls	r18, r31
  6a:	31 02       	muls	r19, r17
  6c:	33 02       	muls	r19, r19
  6e:	35 02       	muls	r19, r21
  70:	37 02       	muls	r19, r23
  72:	39 02       	muls	r19, r25
  74:	3b 02       	muls	r19, r27
  76:	47 02       	muls	r20, r23
  78:	49 02       	muls	r20, r25
  7a:	4b 02       	muls	r20, r27
  7c:	4d 02       	muls	r20, r29
  7e:	4f 02       	muls	r20, r31
  80:	51 02       	muls	r21, r17
  82:	53 02       	muls	r21, r19

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf ef       	ldi	r28, 0xFF	; 255
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
  90:	11 e0       	ldi	r17, 0x01	; 1
  92:	a0 e0       	ldi	r26, 0x00	; 0
  94:	b1 e0       	ldi	r27, 0x01	; 1
  96:	e4 ec       	ldi	r30, 0xC4	; 196
  98:	fa e0       	ldi	r31, 0x0A	; 10
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a8 30       	cpi	r26, 0x08	; 8
  a2:	b1 07       	cpc	r27, r17
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a8 e0       	ldi	r26, 0x08	; 8
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a4 31       	cpi	r26, 0x14	; 20
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	0e 94 43 03 	call	0x686	; 0x686 <main>
  ba:	0c 94 60 05 	jmp	0xac0	; 0xac0 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <init_pwm>:
}


void init_pwm(void)
{
   DDRB |= (1 << DDB2);
  c2:	22 9a       	sbi	0x04, 2	; 4

   ICR1 = 0xFFFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	9f ef       	ldi	r25, 0xFF	; 255
  c8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  cc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

   OCR1B = 0x0000;
  d0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  d4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>

   TCCR1A |= (1 << COM1B1);
  d8:	e0 e8       	ldi	r30, 0x80	; 128
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24

   TCCR1A |= (1 << WGM11);
  e2:	80 81       	ld	r24, Z
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	80 83       	st	Z, r24
   TCCR1B |= (1 << WGM12)|(1 << WGM13);
  e8:	e1 e8       	ldi	r30, 0x81	; 129
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	88 61       	ori	r24, 0x18	; 24
  f0:	80 83       	st	Z, r24

   TCCR1B |= (1 << CS10);
  f2:	80 81       	ld	r24, Z
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <init_DEC_module>:
#include <stdint.h>
#include "DEC_module.h"

void init_DEC_module(void)
{
	set_bit(motor_DIRECTION_ddr, motor_DIRECTION_bit);
  fa:	57 9a       	sbi	0x0a, 7	; 10
	set_bit(motor_ENABLE_ddr, motor_ENABLE_bit);
  fc:	3c 9a       	sbi	0x07, 4	; 7
	
	if(DIRECTION)
	{	
		set_bit(motor_DIRECTION_port, motor_DIRECTION_bit);	
  fe:	5f 9a       	sbi	0x0b, 7	; 11
	else
	{
		reset_bit(motor_DIRECTION_port, motor_DIRECTION_bit);
	}
	
	reset_bit(motor_ENABLE_port, motor_ENABLE_bit);
 100:	44 98       	cbi	0x08, 4	; 8
	
	ADMUX |= (1<<REFS0);
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	87 68       	ori	r24, 0x87	; 135
 114:	80 83       	st	Z, r24

	init_pwm();
 116:	0e 94 61 00 	call	0xc2	; 0xc2 <init_pwm>
 11a:	08 95       	ret

0000011c <set_speed_up>:
void set_speed_up(uint8_t speed, uint8_t mod_speed)
{
	
	uint16_t i;
	
	switch(speed)
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	09 f4       	brne	.+2      	; 0x122 <set_speed_up+0x6>
 120:	3e c0       	rjmp	.+124    	; 0x19e <set_speed_up+0x82>
 122:	38 f0       	brcs	.+14     	; 0x132 <set_speed_up+0x16>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	09 f4       	brne	.+2      	; 0x12a <set_speed_up+0xe>
 128:	62 c0       	rjmp	.+196    	; 0x1ee <set_speed_up+0xd2>
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	09 f4       	brne	.+2      	; 0x130 <set_speed_up+0x14>
 12e:	87 c0       	rjmp	.+270    	; 0x23e <set_speed_up+0x122>
 130:	08 95       	ret
	{
		case SPEED_1:
			if (mod_speed)
 132:	66 23       	and	r22, r22
 134:	d1 f0       	breq	.+52     	; 0x16a <set_speed_up+0x4e>
 136:	23 e0       	ldi	r18, 0x03	; 3
 138:	35 e0       	ldi	r19, 0x05	; 5
			{
				for (i = 0; i < 1283; i++)
				{
					_delay_ms(1);
					OCR1B += 10;
 13a:	ea e8       	ldi	r30, 0x8A	; 138
 13c:	f0 e0       	ldi	r31, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e9       	ldi	r24, 0x9F	; 159
 140:	9f e0       	ldi	r25, 0x0F	; 15
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <set_speed_up+0x26>
 146:	00 c0       	rjmp	.+0      	; 0x148 <set_speed_up+0x2c>
 148:	00 00       	nop
 14a:	80 81       	ld	r24, Z
 14c:	91 81       	ldd	r25, Z+1	; 0x01
 14e:	0a 96       	adiw	r24, 0x0a	; 10
 150:	91 83       	std	Z+1, r25	; 0x01
 152:	80 83       	st	Z, r24
 154:	21 50       	subi	r18, 0x01	; 1
 156:	31 09       	sbc	r19, r1
	switch(speed)
	{
		case SPEED_1:
			if (mod_speed)
			{
				for (i = 0; i < 1283; i++)
 158:	91 f7       	brne	.-28     	; 0x13e <set_speed_up+0x22>
				{
					_delay_ms(1);
					OCR1B += 10;
				}
				OCR1B++;
 15a:	ea e8       	ldi	r30, 0x8A	; 138
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	91 81       	ldd	r25, Z+1	; 0x01
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	91 83       	std	Z+1, r25	; 0x01
 166:	80 83       	st	Z, r24
 168:	08 95       	ret
 16a:	28 ea       	ldi	r18, 0xA8	; 168
 16c:	35 e0       	ldi	r19, 0x05	; 5
			else
			{
				for (i = 0; i < 1448; i++)
				{
					_delay_ms(1);
					OCR1B += 10;
 16e:	ea e8       	ldi	r30, 0x8A	; 138
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	8f e9       	ldi	r24, 0x9F	; 159
 174:	9f e0       	ldi	r25, 0x0F	; 15
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <set_speed_up+0x5a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <set_speed_up+0x60>
 17c:	00 00       	nop
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	0a 96       	adiw	r24, 0x0a	; 10
 184:	91 83       	std	Z+1, r25	; 0x01
 186:	80 83       	st	Z, r24
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	31 09       	sbc	r19, r1
				}
				OCR1B++;
			}
			else
			{
				for (i = 0; i < 1448; i++)
 18c:	91 f7       	brne	.-28     	; 0x172 <set_speed_up+0x56>
				{
					_delay_ms(1);
					OCR1B += 10;
				}
				OCR1B += 3;
 18e:	ea e8       	ldi	r30, 0x8A	; 138
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	91 81       	ldd	r25, Z+1	; 0x01
 196:	03 96       	adiw	r24, 0x03	; 3
 198:	91 83       	std	Z+1, r25	; 0x01
 19a:	80 83       	st	Z, r24
 19c:	08 95       	ret
			}
			break;
		case SPEED_2:
			if (mod_speed)
 19e:	66 23       	and	r22, r22
 1a0:	99 f0       	breq	.+38     	; 0x1c8 <set_speed_up+0xac>
 1a2:	29 e4       	ldi	r18, 0x49	; 73
 1a4:	34 e0       	ldi	r19, 0x04	; 4
			{
				for (i = 0; i < 1097; i++)
				{
					_delay_ms(1);
					OCR1B += 3;
 1a6:	ea e8       	ldi	r30, 0x8A	; 138
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	8f e9       	ldi	r24, 0x9F	; 159
 1ac:	9f e0       	ldi	r25, 0x0F	; 15
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <set_speed_up+0x92>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <set_speed_up+0x98>
 1b4:	00 00       	nop
 1b6:	80 81       	ld	r24, Z
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	03 96       	adiw	r24, 0x03	; 3
 1bc:	91 83       	std	Z+1, r25	; 0x01
 1be:	80 83       	st	Z, r24
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	31 09       	sbc	r19, r1
			}
			break;
		case SPEED_2:
			if (mod_speed)
			{
				for (i = 0; i < 1097; i++)
 1c4:	91 f7       	brne	.-28     	; 0x1aa <set_speed_up+0x8e>
 1c6:	08 95       	ret
 1c8:	2d e6       	ldi	r18, 0x6D	; 109
 1ca:	36 e0       	ldi	r19, 0x06	; 6
			else
			{
				for (i = 0; i < 1645; i++)
				{
					_delay_ms(1);
					OCR1B += 2;
 1cc:	ea e8       	ldi	r30, 0x8A	; 138
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	8f e9       	ldi	r24, 0x9F	; 159
 1d2:	9f e0       	ldi	r25, 0x0F	; 15
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <set_speed_up+0xb8>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <set_speed_up+0xbe>
 1da:	00 00       	nop
 1dc:	80 81       	ld	r24, Z
 1de:	91 81       	ldd	r25, Z+1	; 0x01
 1e0:	02 96       	adiw	r24, 0x02	; 2
 1e2:	91 83       	std	Z+1, r25	; 0x01
 1e4:	80 83       	st	Z, r24
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	31 09       	sbc	r19, r1
					OCR1B += 3;
				}
			}
			else
			{
				for (i = 0; i < 1645; i++)
 1ea:	91 f7       	brne	.-28     	; 0x1d0 <set_speed_up+0xb4>
 1ec:	08 95       	ret
					OCR1B += 2;
				}
			}
			break;
		case SPEED_3:
			if (mod_speed)
 1ee:	66 23       	and	r22, r22
 1f0:	99 f0       	breq	.+38     	; 0x218 <set_speed_up+0xfc>
 1f2:	23 e7       	ldi	r18, 0x73	; 115
 1f4:	36 e0       	ldi	r19, 0x06	; 6
			{
				for (i = 0; i < 1651; i++)
				{
					_delay_ms(1);
					OCR1B += 2;
 1f6:	ea e8       	ldi	r30, 0x8A	; 138
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	8f e9       	ldi	r24, 0x9F	; 159
 1fc:	9f e0       	ldi	r25, 0x0F	; 15
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <set_speed_up+0xe2>
 202:	00 c0       	rjmp	.+0      	; 0x204 <set_speed_up+0xe8>
 204:	00 00       	nop
 206:	80 81       	ld	r24, Z
 208:	91 81       	ldd	r25, Z+1	; 0x01
 20a:	02 96       	adiw	r24, 0x02	; 2
 20c:	91 83       	std	Z+1, r25	; 0x01
 20e:	80 83       	st	Z, r24
 210:	21 50       	subi	r18, 0x01	; 1
 212:	31 09       	sbc	r19, r1
			}
			break;
		case SPEED_3:
			if (mod_speed)
			{
				for (i = 0; i < 1651; i++)
 214:	91 f7       	brne	.-28     	; 0x1fa <set_speed_up+0xde>
 216:	08 95       	ret
 218:	2d e6       	ldi	r18, 0x6D	; 109
 21a:	36 e0       	ldi	r19, 0x06	; 6
			else
			{
				for (i = 0; i < 1645; i++)
				{
					_delay_ms(1);
					OCR1B += 2;
 21c:	ea e8       	ldi	r30, 0x8A	; 138
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	8f e9       	ldi	r24, 0x9F	; 159
 222:	9f e0       	ldi	r25, 0x0F	; 15
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <set_speed_up+0x108>
 228:	00 c0       	rjmp	.+0      	; 0x22a <set_speed_up+0x10e>
 22a:	00 00       	nop
 22c:	80 81       	ld	r24, Z
 22e:	91 81       	ldd	r25, Z+1	; 0x01
 230:	02 96       	adiw	r24, 0x02	; 2
 232:	91 83       	std	Z+1, r25	; 0x01
 234:	80 83       	st	Z, r24
 236:	21 50       	subi	r18, 0x01	; 1
 238:	31 09       	sbc	r19, r1
					OCR1B += 2;
				}
			}
			else
			{
				for (i = 0; i < 1645; i++)
 23a:	91 f7       	brne	.-28     	; 0x220 <set_speed_up+0x104>
 23c:	08 95       	ret
					OCR1B += 2;
				}
			}
			break;
		case SPEED_4:
			if (mod_speed)
 23e:	66 23       	and	r22, r22
 240:	99 f0       	breq	.+38     	; 0x268 <set_speed_up+0x14c>
 242:	2d e6       	ldi	r18, 0x6D	; 109
 244:	36 e0       	ldi	r19, 0x06	; 6
			{
				for (i = 0; i < 1645; i++)
				{
					_delay_ms(1);
					OCR1B += 2;
 246:	ea e8       	ldi	r30, 0x8A	; 138
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	8f e9       	ldi	r24, 0x9F	; 159
 24c:	9f e0       	ldi	r25, 0x0F	; 15
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <set_speed_up+0x132>
 252:	00 c0       	rjmp	.+0      	; 0x254 <set_speed_up+0x138>
 254:	00 00       	nop
 256:	80 81       	ld	r24, Z
 258:	91 81       	ldd	r25, Z+1	; 0x01
 25a:	02 96       	adiw	r24, 0x02	; 2
 25c:	91 83       	std	Z+1, r25	; 0x01
 25e:	80 83       	st	Z, r24
 260:	21 50       	subi	r18, 0x01	; 1
 262:	31 09       	sbc	r19, r1
			}
			break;
		case SPEED_4:
			if (mod_speed)
			{
				for (i = 0; i < 1645; i++)
 264:	91 f7       	brne	.-28     	; 0x24a <set_speed_up+0x12e>
 266:	08 95       	ret
 268:	2d e4       	ldi	r18, 0x4D	; 77
 26a:	34 e0       	ldi	r19, 0x04	; 4
			else
			{
				for (i = 0; i < 1101; i++)
				{
					_delay_ms(1);
					OCR1B += 3;
 26c:	ea e8       	ldi	r30, 0x8A	; 138
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	8f e9       	ldi	r24, 0x9F	; 159
 272:	9f e0       	ldi	r25, 0x0F	; 15
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <set_speed_up+0x158>
 278:	00 c0       	rjmp	.+0      	; 0x27a <set_speed_up+0x15e>
 27a:	00 00       	nop
 27c:	80 81       	ld	r24, Z
 27e:	91 81       	ldd	r25, Z+1	; 0x01
 280:	03 96       	adiw	r24, 0x03	; 3
 282:	91 83       	std	Z+1, r25	; 0x01
 284:	80 83       	st	Z, r24
 286:	21 50       	subi	r18, 0x01	; 1
 288:	31 09       	sbc	r19, r1
					OCR1B += 2;
				}
			}
			else
			{
				for (i = 0; i < 1101; i++)
 28a:	91 f7       	brne	.-28     	; 0x270 <set_speed_up+0x154>
 28c:	08 95       	ret

0000028e <set_speed_down>:

void set_speed_down(uint8_t speed, uint8_t mod_speed)
{
	uint16_t i;
	
	switch(speed)
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	69 f1       	breq	.+90     	; 0x2ec <set_speed_down+0x5e>
 292:	20 f0       	brcs	.+8      	; 0x29c <set_speed_down+0xe>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	09 f4       	brne	.+2      	; 0x29a <set_speed_down+0xc>
 298:	51 c0       	rjmp	.+162    	; 0x33c <set_speed_down+0xae>
 29a:	08 95       	ret
	{
		case SPEED_1:
			if (mod_speed)
 29c:	66 23       	and	r22, r22
 29e:	99 f0       	breq	.+38     	; 0x2c6 <set_speed_down+0x38>
 2a0:	29 e4       	ldi	r18, 0x49	; 73
 2a2:	34 e0       	ldi	r19, 0x04	; 4
			{
				for (i = 0; i < 1097; i++)
				{
					_delay_ms(1);
					OCR1B -= 3;
 2a4:	ea e8       	ldi	r30, 0x8A	; 138
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	8f e9       	ldi	r24, 0x9F	; 159
 2aa:	9f e0       	ldi	r25, 0x0F	; 15
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <set_speed_down+0x1e>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <set_speed_down+0x24>
 2b2:	00 00       	nop
 2b4:	80 81       	ld	r24, Z
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	03 97       	sbiw	r24, 0x03	; 3
 2ba:	91 83       	std	Z+1, r25	; 0x01
 2bc:	80 83       	st	Z, r24
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	31 09       	sbc	r19, r1
	switch(speed)
	{
		case SPEED_1:
			if (mod_speed)
			{
				for (i = 0; i < 1097; i++)
 2c2:	91 f7       	brne	.-28     	; 0x2a8 <set_speed_down+0x1a>
 2c4:	08 95       	ret
 2c6:	2d e6       	ldi	r18, 0x6D	; 109
 2c8:	36 e0       	ldi	r19, 0x06	; 6
			else
			{
				for (i = 0; i < 1645; i++)
				{
					_delay_ms(1);
					OCR1B -= 2;
 2ca:	ea e8       	ldi	r30, 0x8A	; 138
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	8f e9       	ldi	r24, 0x9F	; 159
 2d0:	9f e0       	ldi	r25, 0x0F	; 15
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <set_speed_down+0x44>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <set_speed_down+0x4a>
 2d8:	00 00       	nop
 2da:	80 81       	ld	r24, Z
 2dc:	91 81       	ldd	r25, Z+1	; 0x01
 2de:	02 97       	sbiw	r24, 0x02	; 2
 2e0:	91 83       	std	Z+1, r25	; 0x01
 2e2:	80 83       	st	Z, r24
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	31 09       	sbc	r19, r1
					OCR1B -= 3;
				}
			}
			else
			{
				for (i = 0; i < 1645; i++)
 2e8:	91 f7       	brne	.-28     	; 0x2ce <set_speed_down+0x40>
 2ea:	08 95       	ret
					OCR1B -= 2;
				}
			}
			break;
		case SPEED_2:
			if (mod_speed)
 2ec:	66 23       	and	r22, r22
 2ee:	99 f0       	breq	.+38     	; 0x316 <set_speed_down+0x88>
 2f0:	23 e7       	ldi	r18, 0x73	; 115
 2f2:	36 e0       	ldi	r19, 0x06	; 6
			{
				for (i = 0; i < 1651; i++)
				{
					_delay_ms(1);
					OCR1B -= 2;
 2f4:	ea e8       	ldi	r30, 0x8A	; 138
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	8f e9       	ldi	r24, 0x9F	; 159
 2fa:	9f e0       	ldi	r25, 0x0F	; 15
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <set_speed_down+0x6e>
 300:	00 c0       	rjmp	.+0      	; 0x302 <set_speed_down+0x74>
 302:	00 00       	nop
 304:	80 81       	ld	r24, Z
 306:	91 81       	ldd	r25, Z+1	; 0x01
 308:	02 97       	sbiw	r24, 0x02	; 2
 30a:	91 83       	std	Z+1, r25	; 0x01
 30c:	80 83       	st	Z, r24
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	31 09       	sbc	r19, r1
			}
			break;
		case SPEED_2:
			if (mod_speed)
			{
				for (i = 0; i < 1651; i++)
 312:	91 f7       	brne	.-28     	; 0x2f8 <set_speed_down+0x6a>
 314:	08 95       	ret
 316:	2d e6       	ldi	r18, 0x6D	; 109
 318:	36 e0       	ldi	r19, 0x06	; 6
			else
			{
				for (i = 0; i < 1645; i++)
				{
					_delay_ms(1);
					OCR1B -= 2;
 31a:	ea e8       	ldi	r30, 0x8A	; 138
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	8f e9       	ldi	r24, 0x9F	; 159
 320:	9f e0       	ldi	r25, 0x0F	; 15
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <set_speed_down+0x94>
 326:	00 c0       	rjmp	.+0      	; 0x328 <set_speed_down+0x9a>
 328:	00 00       	nop
 32a:	80 81       	ld	r24, Z
 32c:	91 81       	ldd	r25, Z+1	; 0x01
 32e:	02 97       	sbiw	r24, 0x02	; 2
 330:	91 83       	std	Z+1, r25	; 0x01
 332:	80 83       	st	Z, r24
 334:	21 50       	subi	r18, 0x01	; 1
 336:	31 09       	sbc	r19, r1
					OCR1B -= 2;
				}
			}
			else
			{
				for (i = 0; i < 1645; i++)
 338:	91 f7       	brne	.-28     	; 0x31e <set_speed_down+0x90>
 33a:	08 95       	ret
					OCR1B -= 2;
				}
			}
			break;
		case SPEED_3:
			if (mod_speed)
 33c:	66 23       	and	r22, r22
 33e:	99 f0       	breq	.+38     	; 0x366 <set_speed_down+0xd8>
 340:	2d e6       	ldi	r18, 0x6D	; 109
 342:	36 e0       	ldi	r19, 0x06	; 6
			{
				for (i = 0; i < 1645; i++)
				{
					_delay_ms(1);
					OCR1B -= 2;
 344:	ea e8       	ldi	r30, 0x8A	; 138
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	8f e9       	ldi	r24, 0x9F	; 159
 34a:	9f e0       	ldi	r25, 0x0F	; 15
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <set_speed_down+0xbe>
 350:	00 c0       	rjmp	.+0      	; 0x352 <set_speed_down+0xc4>
 352:	00 00       	nop
 354:	80 81       	ld	r24, Z
 356:	91 81       	ldd	r25, Z+1	; 0x01
 358:	02 97       	sbiw	r24, 0x02	; 2
 35a:	91 83       	std	Z+1, r25	; 0x01
 35c:	80 83       	st	Z, r24
 35e:	21 50       	subi	r18, 0x01	; 1
 360:	31 09       	sbc	r19, r1
			}
			break;
		case SPEED_3:
			if (mod_speed)
			{
				for (i = 0; i < 1645; i++)
 362:	91 f7       	brne	.-28     	; 0x348 <set_speed_down+0xba>
 364:	08 95       	ret
 366:	2d e4       	ldi	r18, 0x4D	; 77
 368:	34 e0       	ldi	r19, 0x04	; 4
			else
			{
				for (i = 0; i < 1101; i++)
				{
					_delay_ms(1);
					OCR1B -= 3;
 36a:	ea e8       	ldi	r30, 0x8A	; 138
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	8f e9       	ldi	r24, 0x9F	; 159
 370:	9f e0       	ldi	r25, 0x0F	; 15
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <set_speed_down+0xe4>
 376:	00 c0       	rjmp	.+0      	; 0x378 <set_speed_down+0xea>
 378:	00 00       	nop
 37a:	80 81       	ld	r24, Z
 37c:	91 81       	ldd	r25, Z+1	; 0x01
 37e:	03 97       	sbiw	r24, 0x03	; 3
 380:	91 83       	std	Z+1, r25	; 0x01
 382:	80 83       	st	Z, r24
 384:	21 50       	subi	r18, 0x01	; 1
 386:	31 09       	sbc	r19, r1
					OCR1B -= 2;
				}
			}
			else
			{
				for (i = 0; i < 1101; i++)
 388:	91 f7       	brne	.-28     	; 0x36e <set_speed_down+0xe0>
 38a:	08 95       	ret

0000038c <read_ready>:

uint8_t read_ready(void)
{
	uint16_t aux;
	
	ADMUX = ADMUX & 0xF0;
 38c:	ec e7       	ldi	r30, 0x7C	; 124
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	80 7f       	andi	r24, 0xF0	; 240
 394:	80 83       	st	Z, r24
	
	ADMUX |= ( 0x06 & 0x0F);
 396:	80 81       	ld	r24, Z
 398:	86 60       	ori	r24, 0x06	; 6
 39a:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC);
 39c:	ea e7       	ldi	r30, 0x7A	; 122
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	80 64       	ori	r24, 0x40	; 64
 3a4:	80 83       	st	Z, r24
	
	while (ADCSRA & (1<<ADSC) );
 3a6:	80 81       	ld	r24, Z
 3a8:	86 fd       	sbrc	r24, 6
 3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <read_ready+0x1a>
	
	aux = ADC;
 3ac:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3b0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	if(aux > 300)
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	2d 32       	cpi	r18, 0x2D	; 45
 3b8:	31 40       	sbci	r19, 0x01	; 1
 3ba:	08 f4       	brcc	.+2      	; 0x3be <read_ready+0x32>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
	}
	else 
	{
		return 0;
	}
}
 3be:	08 95       	ret

000003c0 <init_keypad>:
#include "keypad.h"

void init_keypad(void)
{

	reset_bit(bt_INTERMITTENT_ddr, bt_INTERMITTENT_bit);
 3c0:	38 98       	cbi	0x07, 0	; 7
	reset_bit(bt_PLUS_ddr, bt_PLUS_bit);
 3c2:	3a 98       	cbi	0x07, 2	; 7
	reset_bit(bt_MINUS_ddr, bt_MINUS_bit);
 3c4:	39 98       	cbi	0x07, 1	; 7
	reset_bit(bt_UNLOCK_ddr, bt_UNLOCK_bit);
 3c6:	20 98       	cbi	0x04, 0	; 4
	reset_bit(bt_SPEED_ddr, bt_SPEED_bit);
 3c8:	3b 98       	cbi	0x07, 3	; 7

	set_bit(bt_INTERMITTENT_port, bt_INTERMITTENT_bit);
 3ca:	40 9a       	sbi	0x08, 0	; 8
	set_bit(bt_PLUS_port, bt_PLUS_bit);
 3cc:	42 9a       	sbi	0x08, 2	; 8
	set_bit(bt_MINUS_port, bt_MINUS_bit);
 3ce:	41 9a       	sbi	0x08, 1	; 8
	set_bit(bt_UNLOCK_port, bt_UNLOCK_bit);
 3d0:	28 9a       	sbi	0x05, 0	; 5
	set_bit(bt_SPEED_port, bt_SPEED_bit);
 3d2:	43 9a       	sbi	0x08, 3	; 8

	set_bit(led_WARNING_ddr, led_WARNING_bit);
 3d4:	50 9a       	sbi	0x0a, 0	; 10
	set_bit(led_ONE_ddr, led_ONE_bit);
 3d6:	54 9a       	sbi	0x0a, 4	; 10
	set_bit(led_TWO_ddr, led_TWO_bit);
 3d8:	53 9a       	sbi	0x0a, 3	; 10
	set_bit(led_THREE_ddr, led_THREE_bit);
 3da:	52 9a       	sbi	0x0a, 2	; 10
	set_bit(led_FOUR_ddr, led_FOUR_bit);
 3dc:	51 9a       	sbi	0x0a, 1	; 10
	set_bit(led_STANDBY_ddr, led_STANDBY_bit);
 3de:	56 9a       	sbi	0x0a, 6	; 10
	set_bit(led_SPEED_ddr, led_SPEED_bit);
 3e0:	55 9a       	sbi	0x0a, 5	; 10
	
	set_bit(led_WARNING_port, led_WARNING_bit);
 3e2:	58 9a       	sbi	0x0b, 0	; 11
	set_bit(led_ONE_port, led_ONE_bit);
 3e4:	5c 9a       	sbi	0x0b, 4	; 11
	set_bit(led_TWO_port, led_TWO_bit);
 3e6:	5b 9a       	sbi	0x0b, 3	; 11
	set_bit(led_THREE_port, led_THREE_bit);
 3e8:	5a 9a       	sbi	0x0b, 2	; 11
	set_bit(led_FOUR_port, led_FOUR_bit);
 3ea:	59 9a       	sbi	0x0b, 1	; 11
	set_bit(led_STANDBY_port, led_STANDBY_bit);
 3ec:	5e 9a       	sbi	0x0b, 6	; 11
	set_bit(led_SPEED_port, led_SPEED_bit);
 3ee:	5d 9a       	sbi	0x0b, 5	; 11
 3f0:	08 95       	ret

000003f2 <read_button>:
}

uint8_t read_button(uint8_t button)
{
	switch(button)
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	b1 f0       	breq	.+44     	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
 3f6:	28 f4       	brcc	.+10     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3f8:	88 23       	and	r24, r24
 3fa:	41 f0       	breq	.+16     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	51 f0       	breq	.+20     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
 400:	22 c0       	rjmp	.+68     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
 402:	83 30       	cpi	r24, 0x03	; 3
 404:	a9 f0       	breq	.+42     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
 406:	84 30       	cpi	r24, 0x04	; 4
 408:	b9 f0       	breq	.+46     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
 40a:	1d c0       	rjmp	.+58     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
	{
		case INTERMITTENT:
			return !(bt_INTERMITTENT_pin & (1<<bt_INTERMITTENT_read));
 40c:	86 b1       	in	r24, 0x06	; 6
 40e:	80 95       	com	r24
 410:	81 70       	andi	r24, 0x01	; 1
 412:	08 95       	ret
			break;
		case PLUS:
			return !(bt_PLUS_pin & (1<<bt_PLUS_read));
 414:	86 b1       	in	r24, 0x06	; 6
 416:	82 fb       	bst	r24, 2
 418:	99 27       	eor	r25, r25
 41a:	90 f9       	bld	r25, 0
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	89 27       	eor	r24, r25
 420:	08 95       	ret
			break;
		case MINUS:
			return !(bt_MINUS_pin & (1<<bt_MINUS_read));
 422:	86 b1       	in	r24, 0x06	; 6
 424:	81 fb       	bst	r24, 1
 426:	99 27       	eor	r25, r25
 428:	90 f9       	bld	r25, 0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	89 27       	eor	r24, r25
 42e:	08 95       	ret
			break;
		case UNLOCK:
			return !(bt_UNLOCK_pin & (1<<bt_UNLOCK_read));
 430:	83 b1       	in	r24, 0x03	; 3
 432:	80 95       	com	r24
 434:	81 70       	andi	r24, 0x01	; 1
 436:	08 95       	ret
			break;
		case SPEED:
			return !(bt_SPEED_pin & (1<<bt_SPEED_read));
 438:	86 b1       	in	r24, 0x06	; 6
 43a:	83 fb       	bst	r24, 3
 43c:	99 27       	eor	r25, r25
 43e:	90 f9       	bld	r25, 0
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	89 27       	eor	r24, r25
 444:	08 95       	ret
			break;
	}	
	return 0;
 446:	80 e0       	ldi	r24, 0x00	; 0
}
 448:	08 95       	ret

0000044a <led_on>:

void led_on(uint8_t button)
{
		switch(button)
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	fc 01       	movw	r30, r24
 44e:	35 97       	sbiw	r30, 0x05	; 5
 450:	e7 30       	cpi	r30, 0x07	; 7
 452:	f1 05       	cpc	r31, r1
 454:	88 f4       	brcc	.+34     	; 0x478 <led_on+0x2e>
 456:	ec 5c       	subi	r30, 0xCC	; 204
 458:	ff 4f       	sbci	r31, 0xFF	; 255
 45a:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__tablejump2__>
		{
			case WARNING:
				reset_bit(led_WARNING_port, led_WARNING_bit);
 45e:	58 98       	cbi	0x0b, 0	; 11
				break;
 460:	08 95       	ret
			case ONE:
				reset_bit(led_ONE_port, led_ONE_bit);
 462:	5c 98       	cbi	0x0b, 4	; 11
				break;
 464:	08 95       	ret
			case TWO:
				reset_bit(led_TWO_port, led_TWO_bit);
 466:	5b 98       	cbi	0x0b, 3	; 11
				break;
 468:	08 95       	ret
			case THREE:
				reset_bit(led_THREE_port, led_THREE_bit);
 46a:	5a 98       	cbi	0x0b, 2	; 11
				break;
 46c:	08 95       	ret
			case FOUR:
				reset_bit(led_FOUR_port, led_FOUR_bit);
 46e:	59 98       	cbi	0x0b, 1	; 11
				break;
 470:	08 95       	ret
			case STANDBY:
				reset_bit(led_STANDBY_port, led_STANDBY_bit);
 472:	5e 98       	cbi	0x0b, 6	; 11
				break;
 474:	08 95       	ret
			case SPEED_LED:
				reset_bit(led_SPEED_port, led_SPEED_bit);
 476:	5d 98       	cbi	0x0b, 5	; 11
 478:	08 95       	ret

0000047a <led_off>:
		}
}

void led_off(uint8_t button)
{
	switch(button)
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	fc 01       	movw	r30, r24
 47e:	35 97       	sbiw	r30, 0x05	; 5
 480:	e7 30       	cpi	r30, 0x07	; 7
 482:	f1 05       	cpc	r31, r1
 484:	88 f4       	brcc	.+34     	; 0x4a8 <led_off+0x2e>
 486:	e5 5c       	subi	r30, 0xC5	; 197
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__tablejump2__>
	{
		case WARNING:
			set_bit(led_WARNING_port, led_WARNING_bit);
 48e:	58 9a       	sbi	0x0b, 0	; 11
			break;
 490:	08 95       	ret
		case ONE:
			set_bit(led_ONE_port, led_ONE_bit);
 492:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 494:	08 95       	ret
		case TWO:
			set_bit(led_TWO_port, led_TWO_bit);
 496:	5b 9a       	sbi	0x0b, 3	; 11
			break;
 498:	08 95       	ret
		case THREE:
			set_bit(led_THREE_port, led_THREE_bit);
 49a:	5a 9a       	sbi	0x0b, 2	; 11
			break;
 49c:	08 95       	ret
		case FOUR:
			set_bit(led_FOUR_port, led_FOUR_bit);
 49e:	59 9a       	sbi	0x0b, 1	; 11
			break;
 4a0:	08 95       	ret
		case STANDBY:
			set_bit(led_STANDBY_port, led_STANDBY_bit);
 4a2:	5e 9a       	sbi	0x0b, 6	; 11
			break;
 4a4:	08 95       	ret
		case SPEED_LED:
			set_bit(led_SPEED_port, led_SPEED_bit);
 4a6:	5d 9a       	sbi	0x0b, 5	; 11
 4a8:	08 95       	ret

000004aa <led_toggle>:
	}
}

void led_toggle(uint8_t button)
{
	switch(button)
 4aa:	8a 30       	cpi	r24, 0x0A	; 10
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <led_toggle+0x6>
	{
		case STANDBY:
			set_bit(led_STANDBY_pin, led_STANDBY_bit);
 4ae:	4e 9a       	sbi	0x09, 6	; 9
 4b0:	08 95       	ret

000004b2 <init_timer>:
 *								Fun��es                                *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

void init_timer(void)
{
	set_bit(TCCR0A, WGM01);								// Seleciona o modo CTC
 4b2:	84 b5       	in	r24, 0x24	; 36
 4b4:	82 60       	ori	r24, 0x02	; 2
 4b6:	84 bd       	out	0x24, r24	; 36
	
	set_bit(TCCR0B, CS01);								// Seleciona o prescaler - Clk/64
 4b8:	85 b5       	in	r24, 0x25	; 37
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	85 bd       	out	0x25, r24	; 37
	set_bit(TCCR0B, CS00);
 4be:	85 b5       	in	r24, 0x25	; 37
 4c0:	81 60       	ori	r24, 0x01	; 1
 4c2:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 124;										
 4c4:	8c e7       	ldi	r24, 0x7C	; 124
 4c6:	87 bd       	out	0x27, r24	; 39
		
		T = (1/16) * 2 * 64 * (1 + 124)
		T = 1000uS
	*/
	
	set_bit(TIMSK0, OCIE0A);							// Habilita flag de interrup��o por compara��o					
 4c8:	ee e6       	ldi	r30, 0x6E	; 110
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	82 60       	ori	r24, 0x02	; 2
 4d0:	80 83       	st	Z, r24
 4d2:	08 95       	ret

000004d4 <up_speed>:
}

void up_speed(void)
{
	
	if(current_speed == 0)
 4d4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <current_speed>
 4d8:	81 11       	cpse	r24, r1
 4da:	11 c0       	rjmp	.+34     	; 0x4fe <up_speed+0x2a>
	{
		status_standby = 0;
 4dc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
 4e0:	8e 7f       	andi	r24, 0xFE	; 254
 4e2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <FLAGSbits>
		current_speed = 1;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_speed>
		
		set_speed_up(SPEED_1, status_speed);
 4ec:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <status_speed>
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	0e 94 8e 00 	call	0x11c	; 0x11c <set_speed_up>
		
		led_on(ONE);
 4f6:	86 e0       	ldi	r24, 0x06	; 6
 4f8:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 4fc:	08 95       	ret
		
	}
	else if(current_speed == 1)
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	79 f4       	brne	.+30     	; 0x520 <up_speed+0x4c>
	{
		current_speed = 2;
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_speed>
		
		set_speed_up(SPEED_2, status_speed);
 508:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <status_speed>
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 8e 00 	call	0x11c	; 0x11c <set_speed_up>
		
		led_off(ONE);
 512:	86 e0       	ldi	r24, 0x06	; 6
 514:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
		led_on(TWO);
 518:	87 e0       	ldi	r24, 0x07	; 7
 51a:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 51e:	08 95       	ret

	}
	else if(current_speed == 2)
 520:	82 30       	cpi	r24, 0x02	; 2
 522:	a1 f4       	brne	.+40     	; 0x54c <up_speed+0x78>
	{
		current_speed = 3;
 524:	83 e0       	ldi	r24, 0x03	; 3
 526:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_speed>
		status_previus_speed = 0;
 52a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
 52e:	87 7f       	andi	r24, 0xF7	; 247
 530:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <FLAGSbits>
		
		set_speed_up(SPEED_3, status_speed);
 534:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <status_speed>
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	0e 94 8e 00 	call	0x11c	; 0x11c <set_speed_up>
		
		led_off(TWO);
 53e:	87 e0       	ldi	r24, 0x07	; 7
 540:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
		led_on(THREE);
 544:	88 e0       	ldi	r24, 0x08	; 8
 546:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 54a:	08 95       	ret
		
	}
	else if(current_speed == 3)
 54c:	83 30       	cpi	r24, 0x03	; 3
 54e:	99 f4       	brne	.+38     	; 0x576 <up_speed+0xa2>
	{
		current_speed = 4;
 550:	84 e0       	ldi	r24, 0x04	; 4
 552:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_speed>
		status_previus_speed = 1;
 556:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
 55a:	88 60       	ori	r24, 0x08	; 8
 55c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <FLAGSbits>
		
		set_speed_up(SPEED_4, status_speed);
 560:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <status_speed>
 564:	83 e0       	ldi	r24, 0x03	; 3
 566:	0e 94 8e 00 	call	0x11c	; 0x11c <set_speed_up>
		
		led_off(THREE);
 56a:	88 e0       	ldi	r24, 0x08	; 8
 56c:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
		led_on(FOUR);
 570:	89 e0       	ldi	r24, 0x09	; 9
 572:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 576:	08 95       	ret

00000578 <down_speed>:
	}
}

void down_speed(void)
{
	if(current_speed == 4)
 578:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <current_speed>
 57c:	84 30       	cpi	r24, 0x04	; 4
 57e:	a1 f4       	brne	.+40     	; 0x5a8 <down_speed+0x30>
	{
		current_speed = 3;
 580:	83 e0       	ldi	r24, 0x03	; 3
 582:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_speed>
		status_previus_speed = 0;
 586:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
 58a:	87 7f       	andi	r24, 0xF7	; 247
 58c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <FLAGSbits>
		
		set_speed_down(SPEED_3, status_speed);
 590:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <status_speed>
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	0e 94 47 01 	call	0x28e	; 0x28e <set_speed_down>
		
		led_off(FOUR);
 59a:	89 e0       	ldi	r24, 0x09	; 9
 59c:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
		led_on(THREE);
 5a0:	88 e0       	ldi	r24, 0x08	; 8
 5a2:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 5a6:	08 95       	ret
		
	}
	else if(current_speed == 3)
 5a8:	83 30       	cpi	r24, 0x03	; 3
 5aa:	79 f4       	brne	.+30     	; 0x5ca <down_speed+0x52>
	{
		current_speed = 2;
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_speed>
		
		set_speed_down(SPEED_2, status_speed);
 5b2:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <status_speed>
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 47 01 	call	0x28e	; 0x28e <set_speed_down>
		
		led_off(THREE);
 5bc:	88 e0       	ldi	r24, 0x08	; 8
 5be:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
		led_on(TWO);
 5c2:	87 e0       	ldi	r24, 0x07	; 7
 5c4:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 5c8:	08 95       	ret
		
	}
	else if(current_speed == 2)
 5ca:	82 30       	cpi	r24, 0x02	; 2
 5cc:	71 f4       	brne	.+28     	; 0x5ea <down_speed+0x72>
	{
		current_speed = 1;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_speed>
		
		set_speed_down(SPEED_1, status_speed);
 5d4:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <status_speed>
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	0e 94 47 01 	call	0x28e	; 0x28e <set_speed_down>
		
		led_off(TWO);
 5de:	87 e0       	ldi	r24, 0x07	; 7
 5e0:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
		led_on(ONE);
 5e4:	86 e0       	ldi	r24, 0x06	; 6
 5e6:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 5ea:	08 95       	ret

000005ec <up_speed_intermittent>:

void up_speed_intermittent(void)
{
	unsigned int i;
	
	if(status_previus_speed == 0)
 5ec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
 5f0:	83 fd       	sbrc	r24, 3
 5f2:	0f c0       	rjmp	.+30     	; 0x612 <up_speed_intermittent+0x26>
	{
		current_speed = 3;
 5f4:	83 e0       	ldi	r24, 0x03	; 3
 5f6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_speed>
		
		set_speed_up(SPEED_3, status_speed);
 5fa:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <status_speed>
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	0e 94 8e 00 	call	0x11c	; 0x11c <set_speed_up>
		
		led_off(TWO);
 604:	87 e0       	ldi	r24, 0x07	; 7
 606:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
		led_on(THREE);
 60a:	88 e0       	ldi	r24, 0x08	; 8
 60c:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 610:	08 95       	ret

	}
	else if(status_previus_speed == 1)
	{
		current_speed = 4;
 612:	84 e0       	ldi	r24, 0x04	; 4
 614:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_speed>
	
		if (status_speed )
 618:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <status_speed>
 61c:	88 23       	and	r24, r24
 61e:	99 f0       	breq	.+38     	; 0x646 <up_speed_intermittent+0x5a>
 620:	20 e7       	ldi	r18, 0x70	; 112
 622:	36 e0       	ldi	r19, 0x06	; 6
		{
			for (i = 0 ; i < 1648; i++)
			{
				_delay_ms(1);
				OCR1B += 4;
 624:	ea e8       	ldi	r30, 0x8A	; 138
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	8f e9       	ldi	r24, 0x9F	; 159
 62a:	9f e0       	ldi	r25, 0x0F	; 15
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <up_speed_intermittent+0x40>
 630:	00 c0       	rjmp	.+0      	; 0x632 <up_speed_intermittent+0x46>
 632:	00 00       	nop
 634:	80 81       	ld	r24, Z
 636:	91 81       	ldd	r25, Z+1	; 0x01
 638:	04 96       	adiw	r24, 0x04	; 4
 63a:	91 83       	std	Z+1, r25	; 0x01
 63c:	80 83       	st	Z, r24
 63e:	21 50       	subi	r18, 0x01	; 1
 640:	31 09       	sbc	r19, r1
	{
		current_speed = 4;
	
		if (status_speed )
		{
			for (i = 0 ; i < 1648; i++)
 642:	91 f7       	brne	.-28     	; 0x628 <up_speed_intermittent+0x3c>
 644:	19 c0       	rjmp	.+50     	; 0x678 <up_speed_intermittent+0x8c>
 646:	20 e7       	ldi	r18, 0x70	; 112
 648:	36 e0       	ldi	r19, 0x06	; 6
		else
		{
			for (i = 0 ; i < 1648; i++)
			{
				_delay_ms(1);
				OCR1B += 4;
 64a:	ea e8       	ldi	r30, 0x8A	; 138
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	8f e9       	ldi	r24, 0x9F	; 159
 650:	9f e0       	ldi	r25, 0x0F	; 15
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <up_speed_intermittent+0x66>
 656:	00 c0       	rjmp	.+0      	; 0x658 <up_speed_intermittent+0x6c>
 658:	00 00       	nop
 65a:	80 81       	ld	r24, Z
 65c:	91 81       	ldd	r25, Z+1	; 0x01
 65e:	04 96       	adiw	r24, 0x04	; 4
 660:	91 83       	std	Z+1, r25	; 0x01
 662:	80 83       	st	Z, r24
 664:	21 50       	subi	r18, 0x01	; 1
 666:	31 09       	sbc	r19, r1
				OCR1B += 4;
			}
		}
		else
		{
			for (i = 0 ; i < 1648; i++)
 668:	91 f7       	brne	.-28     	; 0x64e <up_speed_intermittent+0x62>
			{
				_delay_ms(1);
				OCR1B += 4;
			}
			OCR1B++;
 66a:	ea e8       	ldi	r30, 0x8A	; 138
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	91 81       	ldd	r25, Z+1	; 0x01
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	91 83       	std	Z+1, r25	; 0x01
 676:	80 83       	st	Z, r24
		}
		
		led_off(TWO);
 678:	87 e0       	ldi	r24, 0x07	; 7
 67a:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
		led_on(FOUR);
 67e:	89 e0       	ldi	r24, 0x09	; 9
 680:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 684:	08 95       	ret

00000686 <main>:
	
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                        Inicializa��o do Sistema                     *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	status_standby = 1;											// Come�a sistema em standby
 686:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
 68a:	81 60       	ori	r24, 0x01	; 1
 68c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <FLAGSbits>
	status_speed = eeprom_read_byte((unsigned char *)addr);		// Come�a na velocidade salva na mem�ria flash
 690:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <addr>
 694:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <addr+0x1>
 698:	0e 94 4a 05 	call	0xa94	; 0xa94 <eeprom_read_byte>
 69c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <status_speed>
																// Padr�o: 4000/5000/6000/7000 - 1
	current_speed = 0;											// Come�a com o motor desligado
 6a0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <current_speed>
	
	init_timer();												
 6a4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <init_timer>
	init_keypad();
 6a8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <init_keypad>
	init_DEC_module();		
 6ac:	0e 94 7d 00 	call	0xfa	; 0xfa <init_DEC_module>
	
	sei();														// Habilita interrup��es globais
 6b0:	78 94       	sei
			}
			else
			{
			
				status_minus_button = 0;
				filter_minus = T_FILTER;
 6b2:	ca ef       	ldi	r28, 0xFA	; 250
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
    while (1) 
    {
		
		if(read_button(UNLOCK))												// Bot�o de desbloquear foi pressionado?
 6b4:	83 e0       	ldi	r24, 0x03	; 3
 6b6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <read_button>
 6ba:	88 23       	and	r24, r24
 6bc:	09 f4       	brne	.+2      	; 0x6c0 <main+0x3a>
 6be:	86 c0       	rjmp	.+268    	; 0x7cc <main+0x146>
		{
		//------------------BOT�O QUE ATIVA INTERMIT�NCIA-------------------
			if(read_button(INTERMITTENT))									
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <read_button>
 6c6:	88 23       	and	r24, r24
 6c8:	79 f1       	breq	.+94     	; 0x728 <main+0xa2>
			{
				if(!status_intermittent_button)
 6ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 6ce:	80 fd       	sbrc	r24, 0
 6d0:	32 c0       	rjmp	.+100    	; 0x736 <main+0xb0>
				{
					if(filter_intermittent)
 6d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <filter_intermittent>
 6d6:	88 23       	and	r24, r24
 6d8:	21 f0       	breq	.+8      	; 0x6e2 <main+0x5c>
					{
						filter_intermittent--;
 6da:	81 50       	subi	r24, 0x01	; 1
 6dc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <filter_intermittent>
 6e0:	2a c0       	rjmp	.+84     	; 0x736 <main+0xb0>
					}
					else
					{
						if(status_intermittent == 1)
 6e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
 6e6:	82 ff       	sbrs	r24, 2
 6e8:	0d c0       	rjmp	.+26     	; 0x704 <main+0x7e>
						{
							status_intermittent = 0;
 6ea:	8b 7f       	andi	r24, 0xFB	; 251
 6ec:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <FLAGSbits>
										
							led_off(WARNING);
 6f0:	85 e0       	ldi	r24, 0x05	; 5
 6f2:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
										
							if (current_speed == 2)
 6f6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <current_speed>
 6fa:	82 30       	cpi	r24, 0x02	; 2
 6fc:	79 f4       	brne	.+30     	; 0x71c <main+0x96>
							{
								up_speed_intermittent();
 6fe:	0e 94 f6 02 	call	0x5ec	; 0x5ec <up_speed_intermittent>
 702:	0c c0       	rjmp	.+24     	; 0x71c <main+0x96>
							}
										
						}
						else if(status_intermittent == 0 && current_speed > 2)
 704:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <current_speed>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	40 f0       	brcs	.+16     	; 0x71c <main+0x96>
						{
							status_intermittent = 1;
 70c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
 710:	84 60       	ori	r24, 0x04	; 4
 712:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <FLAGSbits>
										
							led_on(WARNING);
 716:	85 e0       	ldi	r24, 0x05	; 5
 718:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
						}
						
						status_intermittent_button = 1;
 71c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 720:	81 60       	ori	r24, 0x01	; 1
 722:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <FLAGSbutton>
 726:	07 c0       	rjmp	.+14     	; 0x736 <main+0xb0>
				}
			}
			else
			{
				
				status_intermittent_button = 0;
 728:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 72c:	8e 7f       	andi	r24, 0xFE	; 254
 72e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <FLAGSbutton>
				filter_intermittent = T_FILTER;
 732:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <filter_intermittent>
			}
				
			//------------------BOT�O QUE INCREMENTA VELOCIDADE------------------------
			
			if(read_button(PLUS))
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <read_button>
 73c:	88 23       	and	r24, r24
 73e:	c1 f0       	breq	.+48     	; 0x770 <main+0xea>
			{
				if(!status_plus_button)
 740:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 744:	81 fd       	sbrc	r24, 1
 746:	1b c0       	rjmp	.+54     	; 0x77e <main+0xf8>
				{
					if(filter_plus)
 748:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <filter_plus>
 74c:	88 23       	and	r24, r24
 74e:	21 f0       	breq	.+8      	; 0x758 <main+0xd2>
					{
						filter_plus--;
 750:	81 50       	subi	r24, 0x01	; 1
 752:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <filter_plus>
 756:	13 c0       	rjmp	.+38     	; 0x77e <main+0xf8>
					}
					else
					{
						
						set_bit(motor_ENABLE_port, motor_ENABLE_bit);
 758:	44 9a       	sbi	0x08, 4	; 8
						
						if(!status_intermittent)
 75a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
 75e:	82 ff       	sbrs	r24, 2
						{
							up_speed();
 760:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <up_speed>
						}
						status_plus_button = 1;
 764:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 768:	82 60       	ori	r24, 0x02	; 2
 76a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <FLAGSbutton>
 76e:	07 c0       	rjmp	.+14     	; 0x77e <main+0xf8>
				}
			}
			else
			{
				
				status_plus_button = 0;
 770:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 774:	8d 7f       	andi	r24, 0xFD	; 253
 776:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <FLAGSbutton>
				filter_plus = T_FILTER;
 77a:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <filter_plus>
			}
			
			//------------------BOT�O QUE DECREMTENTA VELOCIDADE----------------------
			
			if(read_button(MINUS))
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <read_button>
 784:	88 23       	and	r24, r24
 786:	d9 f0       	breq	.+54     	; 0x7be <main+0x138>
			{
				if(!status_minus_button)
 788:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 78c:	82 fd       	sbrc	r24, 2
 78e:	1e c0       	rjmp	.+60     	; 0x7cc <main+0x146>
				{
					if(filter_minus)
 790:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <filter_minus>
 794:	88 23       	and	r24, r24
 796:	21 f0       	breq	.+8      	; 0x7a0 <main+0x11a>
					{
						filter_minus--;
 798:	81 50       	subi	r24, 0x01	; 1
 79a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <filter_minus>
 79e:	16 c0       	rjmp	.+44     	; 0x7cc <main+0x146>
					}
					else
					{
						if(current_speed > 1 && !status_intermittent)
 7a0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <current_speed>
 7a4:	82 30       	cpi	r24, 0x02	; 2
 7a6:	28 f0       	brcs	.+10     	; 0x7b2 <main+0x12c>
 7a8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
 7ac:	82 ff       	sbrs	r24, 2
						{
							down_speed();
 7ae:	0e 94 bc 02 	call	0x578	; 0x578 <down_speed>
						}
					
						status_minus_button = 1;
 7b2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 7b6:	84 60       	ori	r24, 0x04	; 4
 7b8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <FLAGSbutton>
 7bc:	07 c0       	rjmp	.+14     	; 0x7cc <main+0x146>
				}
			}
			else
			{
			
				status_minus_button = 0;
 7be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 7c2:	8b 7f       	andi	r24, 0xFB	; 251
 7c4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <FLAGSbutton>
				filter_minus = T_FILTER;
 7c8:	c0 93 05 01 	sts	0x0105, r28	; 0x800105 <filter_minus>
			}
			
		}
		//------------------BOT�O QUE MUDA PERFIL DE VELOCIDADE-------------------
		
		if(read_button(SPEED))
 7cc:	84 e0       	ldi	r24, 0x04	; 4
 7ce:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <read_button>
 7d2:	88 23       	and	r24, r24
 7d4:	51 f1       	breq	.+84     	; 0x82a <main+0x1a4>
		{
			if(!status_speed_button)
 7d6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 7da:	83 fd       	sbrc	r24, 3
 7dc:	2d c0       	rjmp	.+90     	; 0x838 <main+0x1b2>
			{
				if(filter_speed)
 7de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <filter_speed>
 7e2:	88 23       	and	r24, r24
 7e4:	21 f0       	breq	.+8      	; 0x7ee <main+0x168>
				{
					filter_speed--;
 7e6:	81 50       	subi	r24, 0x01	; 1
 7e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <filter_speed>
 7ec:	25 c0       	rjmp	.+74     	; 0x838 <main+0x1b2>
				}
				else
				{
					if(status_speed)
 7ee:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <status_speed>
 7f2:	88 23       	and	r24, r24
 7f4:	51 f0       	breq	.+20     	; 0x80a <main+0x184>
					{
						status_speed = 0;
 7f6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <status_speed>
						eeprom_write_byte((unsigned char *)addr, status_speed);		// Guarda mudan�a na mem�ria eeprom do atmega
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <addr>
 800:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <addr+0x1>
 804:	0e 94 52 05 	call	0xaa4	; 0xaa4 <eeprom_write_byte>
 808:	0a c0       	rjmp	.+20     	; 0x81e <main+0x198>
					}
					else
					{
						status_speed = 1;
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <status_speed>
						eeprom_write_byte((unsigned char *)addr, status_speed);		// Guarda mudan�a na mem�ria eeprom do atmega
 810:	61 e0       	ldi	r22, 0x01	; 1
 812:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <addr>
 816:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <addr+0x1>
 81a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <eeprom_write_byte>
					}
					
					status_speed_button = 1;
 81e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 822:	88 60       	ori	r24, 0x08	; 8
 824:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <FLAGSbutton>
 828:	07 c0       	rjmp	.+14     	; 0x838 <main+0x1b2>
			}
		}
		else
		{
			
			status_speed_button = 0;
 82a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLAGSbutton>
 82e:	87 7f       	andi	r24, 0xF7	; 247
 830:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <FLAGSbutton>
			filter_speed = T_FILTER;
 834:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <filter_speed>
		}
		//------------------FLAG DE STATUS DO MOTOR-------------------
		
		if(read_ready() == 0)												// Se o cabo do motor for retirado, ou haver um problema, o aparelho reseta as configura��es.
 838:	0e 94 c6 01 	call	0x38c	; 0x38c <read_ready>
 83c:	81 11       	cpse	r24, r1
 83e:	3a cf       	rjmp	.-396    	; 0x6b4 <main+0x2e>
		{
			status_standby = 1;
 840:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
			status_intermittent = 0;
 844:	81 60       	ori	r24, 0x01	; 1
 846:	8b 7f       	andi	r24, 0xFB	; 251
 848:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <FLAGSbits>
				
			current_speed = 0;
 84c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <current_speed>
				
			led_off(ONE);
 850:	86 e0       	ldi	r24, 0x06	; 6
 852:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
			led_off(TWO);
 856:	87 e0       	ldi	r24, 0x07	; 7
 858:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
			led_off(THREE);
 85c:	88 e0       	ldi	r24, 0x08	; 8
 85e:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
			led_off(FOUR);
 862:	89 e0       	ldi	r24, 0x09	; 9
 864:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
			led_off(WARNING);
 868:	85 e0       	ldi	r24, 0x05	; 5
 86a:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
 86e:	22 cf       	rjmp	.-444    	; 0x6b4 <main+0x2e>

00000870 <down_speed_intermittent>:

void down_speed_intermittent(void)
{
	unsigned int i;
	
	if (current_speed == 4)
 870:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <current_speed>
 874:	84 30       	cpi	r24, 0x04	; 4
 876:	d1 f5       	brne	.+116    	; 0x8ec <down_speed_intermittent+0x7c>
	{
		current_speed = 2;
 878:	82 e0       	ldi	r24, 0x02	; 2
 87a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_speed>

		if (status_speed)
 87e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <status_speed>
 882:	88 23       	and	r24, r24
 884:	99 f0       	breq	.+38     	; 0x8ac <down_speed_intermittent+0x3c>
 886:	20 e7       	ldi	r18, 0x70	; 112
 888:	36 e0       	ldi	r19, 0x06	; 6
		{
			for (i = 0 ; i < 1648; i++)
			{
				_delay_ms(1);
				OCR1B -= 4;
 88a:	ea e8       	ldi	r30, 0x8A	; 138
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	8f e9       	ldi	r24, 0x9F	; 159
 890:	9f e0       	ldi	r25, 0x0F	; 15
 892:	01 97       	sbiw	r24, 0x01	; 1
 894:	f1 f7       	brne	.-4      	; 0x892 <down_speed_intermittent+0x22>
 896:	00 c0       	rjmp	.+0      	; 0x898 <down_speed_intermittent+0x28>
 898:	00 00       	nop
 89a:	80 81       	ld	r24, Z
 89c:	91 81       	ldd	r25, Z+1	; 0x01
 89e:	04 97       	sbiw	r24, 0x04	; 4
 8a0:	91 83       	std	Z+1, r25	; 0x01
 8a2:	80 83       	st	Z, r24
 8a4:	21 50       	subi	r18, 0x01	; 1
 8a6:	31 09       	sbc	r19, r1
	{
		current_speed = 2;

		if (status_speed)
		{
			for (i = 0 ; i < 1648; i++)
 8a8:	91 f7       	brne	.-28     	; 0x88e <down_speed_intermittent+0x1e>
 8aa:	19 c0       	rjmp	.+50     	; 0x8de <down_speed_intermittent+0x6e>
 8ac:	20 e7       	ldi	r18, 0x70	; 112
 8ae:	36 e0       	ldi	r19, 0x06	; 6
		else
		{
			for (i = 0 ; i < 1648; i++)
			{
				_delay_ms(1);
				OCR1B -= 4;
 8b0:	ea e8       	ldi	r30, 0x8A	; 138
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	8f e9       	ldi	r24, 0x9F	; 159
 8b6:	9f e0       	ldi	r25, 0x0F	; 15
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <down_speed_intermittent+0x48>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <down_speed_intermittent+0x4e>
 8be:	00 00       	nop
 8c0:	80 81       	ld	r24, Z
 8c2:	91 81       	ldd	r25, Z+1	; 0x01
 8c4:	04 97       	sbiw	r24, 0x04	; 4
 8c6:	91 83       	std	Z+1, r25	; 0x01
 8c8:	80 83       	st	Z, r24
 8ca:	21 50       	subi	r18, 0x01	; 1
 8cc:	31 09       	sbc	r19, r1
				OCR1B -= 4;
			}
		}
		else
		{
			for (i = 0 ; i < 1648; i++)
 8ce:	91 f7       	brne	.-28     	; 0x8b4 <down_speed_intermittent+0x44>
			{
				_delay_ms(1);
				OCR1B -= 4;
			}
			OCR1B--;
 8d0:	ea e8       	ldi	r30, 0x8A	; 138
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	91 81       	ldd	r25, Z+1	; 0x01
 8d8:	01 97       	sbiw	r24, 0x01	; 1
 8da:	91 83       	std	Z+1, r25	; 0x01
 8dc:	80 83       	st	Z, r24
		}
		
		led_off(FOUR);
 8de:	89 e0       	ldi	r24, 0x09	; 9
 8e0:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
		led_on(TWO);
 8e4:	87 e0       	ldi	r24, 0x07	; 7
 8e6:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 8ea:	08 95       	ret
	}
	else if (current_speed == 3)
 8ec:	83 30       	cpi	r24, 0x03	; 3
 8ee:	71 f4       	brne	.+28     	; 0x90c <__stack+0xd>
	{
		current_speed = 2;
 8f0:	82 e0       	ldi	r24, 0x02	; 2
 8f2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <current_speed>
		
		set_speed_down(SPEED_2, status_speed);
 8f6:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <status_speed>
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	0e 94 47 01 	call	0x28e	; 0x28e <set_speed_down>
		
		led_off(THREE);
 900:	88 e0       	ldi	r24, 0x08	; 8
 902:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
		led_on(TWO);
 906:	87 e0       	ldi	r24, 0x07	; 7
 908:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 90c:	08 95       	ret

0000090e <__vector_14>:
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *								Interrup��es                           *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

ISR(TIMER0_COMPA_vect)
{
 90e:	1f 92       	push	r1
 910:	0f 92       	push	r0
 912:	0f b6       	in	r0, 0x3f	; 63
 914:	0f 92       	push	r0
 916:	11 24       	eor	r1, r1
 918:	2f 93       	push	r18
 91a:	3f 93       	push	r19
 91c:	4f 93       	push	r20
 91e:	5f 93       	push	r21
 920:	6f 93       	push	r22
 922:	7f 93       	push	r23
 924:	8f 93       	push	r24
 926:	9f 93       	push	r25
 928:	af 93       	push	r26
 92a:	bf 93       	push	r27
 92c:	ef 93       	push	r30
 92e:	ff 93       	push	r31
	static int counter_led;										// Contador do timer para piscar led			
	static long int counter_inter;								// Contador do timer para mudar as velocidades da intermit�ncia
	static long int PRESCALER_SPEED = PRESCALER_CURRENT_SPEED;	// Prescaler contar os segundos das velocidades da intermit�ncia
	char status_motor = read_ready();							// Status do motor
 930:	0e 94 c6 01 	call	0x38c	; 0x38c <read_ready>
	
	if(counter_led == PRESCALER_LED)							// Se o prescaler chegar no valor m�ximo 
 934:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <counter_led.1765>
 938:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <counter_led.1765+0x1>
 93c:	28 3e       	cpi	r18, 0xE8	; 232
 93e:	93 e0       	ldi	r25, 0x03	; 3
 940:	39 07       	cpc	r19, r25
 942:	09 f5       	brne	.+66     	; 0x986 <__vector_14+0x78>
	{
		if(status_standby)										// O modulo estiver no modo standby
 944:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <FLAGSbits>
 948:	90 ff       	sbrs	r25, 0
 94a:	0a c0       	rjmp	.+20     	; 0x960 <__vector_14+0x52>
		{
			if(status_motor)									// E o motor estiver conectado
 94c:	88 23       	and	r24, r24
 94e:	21 f0       	breq	.+8      	; 0x958 <__vector_14+0x4a>
			{
				led_on(STANDBY);								// Led acente continuamente
 950:	8a e0       	ldi	r24, 0x0A	; 10
 952:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
 956:	07 c0       	rjmp	.+14     	; 0x966 <__vector_14+0x58>
			}
			else
			{	
				led_toggle(STANDBY);							// Caso motor n�o conectado, pisca led
 958:	8a e0       	ldi	r24, 0x0A	; 10
 95a:	0e 94 55 02 	call	0x4aa	; 0x4aa <led_toggle>
 95e:	03 c0       	rjmp	.+6      	; 0x966 <__vector_14+0x58>
			}
		}
		else
		{
			led_off(STANDBY);									// Caso n�o esteja em modo standby, desliga led
 960:	8a e0       	ldi	r24, 0x0A	; 10
 962:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
		}
		
		if(status_speed)
 966:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <status_speed>
 96a:	88 23       	and	r24, r24
 96c:	21 f0       	breq	.+8      	; 0x976 <__vector_14+0x68>
		{
			led_off(SPEED_LED);
 96e:	8b e0       	ldi	r24, 0x0B	; 11
 970:	0e 94 3d 02 	call	0x47a	; 0x47a <led_off>
 974:	03 c0       	rjmp	.+6      	; 0x97c <__vector_14+0x6e>
		}
		else
		{
			led_on(SPEED_LED);
 976:	8b e0       	ldi	r24, 0x0B	; 11
 978:	0e 94 25 02 	call	0x44a	; 0x44a <led_on>
		}
		counter_led = 0;										// Reinicia prescaler
 97c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <counter_led.1765+0x1>
 980:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter_led.1765>
 984:	06 c0       	rjmp	.+12     	; 0x992 <__vector_14+0x84>
	}
	else
	{
		counter_led++;											// Caso prescaler n�o estiver no valor m�ximo, incrementa							
 986:	2f 5f       	subi	r18, 0xFF	; 255
 988:	3f 4f       	sbci	r19, 0xFF	; 255
 98a:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <counter_led.1765+0x1>
 98e:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <counter_led.1765>
	}

	if(status_intermittent)										// Se estiver no modo intermitente								
 992:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <FLAGSbits>
 996:	82 ff       	sbrs	r24, 2
 998:	52 c0       	rjmp	.+164    	; 0xa3e <__vector_14+0x130>
	{
		if(counter_inter == PRESCALER_SPEED)					
 99a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 99e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 9a2:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <__data_end+0x2>
 9a6:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <__data_end+0x3>
 9aa:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 9ae:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 9b2:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
 9b6:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
 9ba:	84 17       	cp	r24, r20
 9bc:	95 07       	cpc	r25, r21
 9be:	a6 07       	cpc	r26, r22
 9c0:	b7 07       	cpc	r27, r23
 9c2:	89 f5       	brne	.+98     	; 0xa26 <__vector_14+0x118>
		{
			if(PRESCALER_SPEED == PRESCALER_CURRENT_SPEED)
 9c4:	80 3c       	cpi	r24, 0xC0	; 192
 9c6:	2a ed       	ldi	r18, 0xDA	; 218
 9c8:	92 07       	cpc	r25, r18
 9ca:	a1 05       	cpc	r26, r1
 9cc:	b1 05       	cpc	r27, r1
 9ce:	79 f4       	brne	.+30     	; 0x9ee <__vector_14+0xe0>
			{
				down_speed_intermittent();
 9d0:	0e 94 38 04 	call	0x870	; 0x870 <down_speed_intermittent>
				
				PRESCALER_SPEED = PRESCALER_PREVIUS_SPEED;
 9d4:	80 e4       	ldi	r24, 0x40	; 64
 9d6:	9f e1       	ldi	r25, 0x1F	; 31
 9d8:	a0 e0       	ldi	r26, 0x00	; 0
 9da:	b0 e0       	ldi	r27, 0x00	; 0
 9dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 9e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 9e4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 9e8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 9ec:	13 c0       	rjmp	.+38     	; 0xa14 <__vector_14+0x106>
			}
			else if(PRESCALER_SPEED == PRESCALER_PREVIUS_SPEED)
 9ee:	80 34       	cpi	r24, 0x40	; 64
 9f0:	9f 41       	sbci	r25, 0x1F	; 31
 9f2:	a1 05       	cpc	r26, r1
 9f4:	b1 05       	cpc	r27, r1
 9f6:	71 f4       	brne	.+28     	; 0xa14 <__vector_14+0x106>
			{
				up_speed_intermittent();
 9f8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <up_speed_intermittent>
				
				PRESCALER_SPEED = PRESCALER_CURRENT_SPEED;
 9fc:	80 ec       	ldi	r24, 0xC0	; 192
 9fe:	9a ed       	ldi	r25, 0xDA	; 218
 a00:	a0 e0       	ldi	r26, 0x00	; 0
 a02:	b0 e0       	ldi	r27, 0x00	; 0
 a04:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a08:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a0c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 a10:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
			}
			
			
			counter_inter = 0;
 a14:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 a18:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 a1c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end+0x2>
 a20:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x3>
 a24:	20 c0       	rjmp	.+64     	; 0xa66 <__vector_14+0x158>
		}
		else
		{
			counter_inter++;	
 a26:	01 96       	adiw	r24, 0x01	; 1
 a28:	a1 1d       	adc	r26, r1
 a2a:	b1 1d       	adc	r27, r1
 a2c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 a30:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 a34:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <__data_end+0x2>
 a38:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <__data_end+0x3>
 a3c:	14 c0       	rjmp	.+40     	; 0xa66 <__vector_14+0x158>
		}
	}
	else
	{
		counter_inter = 0;									// Se estiver no modo cont�nuo
 a3e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 a42:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 a46:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end+0x2>
 a4a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x3>
		PRESCALER_SPEED = PRESCALER_CURRENT_SPEED;
 a4e:	80 ec       	ldi	r24, 0xC0	; 192
 a50:	9a ed       	ldi	r25, 0xDA	; 218
 a52:	a0 e0       	ldi	r26, 0x00	; 0
 a54:	b0 e0       	ldi	r27, 0x00	; 0
 a56:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a5a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a5e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 a62:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	}
	
 a66:	ff 91       	pop	r31
 a68:	ef 91       	pop	r30
 a6a:	bf 91       	pop	r27
 a6c:	af 91       	pop	r26
 a6e:	9f 91       	pop	r25
 a70:	8f 91       	pop	r24
 a72:	7f 91       	pop	r23
 a74:	6f 91       	pop	r22
 a76:	5f 91       	pop	r21
 a78:	4f 91       	pop	r20
 a7a:	3f 91       	pop	r19
 a7c:	2f 91       	pop	r18
 a7e:	0f 90       	pop	r0
 a80:	0f be       	out	0x3f, r0	; 63
 a82:	0f 90       	pop	r0
 a84:	1f 90       	pop	r1
 a86:	18 95       	reti

00000a88 <__tablejump2__>:
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	05 90       	lpm	r0, Z+
 a8e:	f4 91       	lpm	r31, Z
 a90:	e0 2d       	mov	r30, r0
 a92:	09 94       	ijmp

00000a94 <eeprom_read_byte>:
 a94:	f9 99       	sbic	0x1f, 1	; 31
 a96:	fe cf       	rjmp	.-4      	; 0xa94 <eeprom_read_byte>
 a98:	92 bd       	out	0x22, r25	; 34
 a9a:	81 bd       	out	0x21, r24	; 33
 a9c:	f8 9a       	sbi	0x1f, 0	; 31
 a9e:	99 27       	eor	r25, r25
 aa0:	80 b5       	in	r24, 0x20	; 32
 aa2:	08 95       	ret

00000aa4 <eeprom_write_byte>:
 aa4:	26 2f       	mov	r18, r22

00000aa6 <eeprom_write_r18>:
 aa6:	f9 99       	sbic	0x1f, 1	; 31
 aa8:	fe cf       	rjmp	.-4      	; 0xaa6 <eeprom_write_r18>
 aaa:	1f ba       	out	0x1f, r1	; 31
 aac:	92 bd       	out	0x22, r25	; 34
 aae:	81 bd       	out	0x21, r24	; 33
 ab0:	20 bd       	out	0x20, r18	; 32
 ab2:	0f b6       	in	r0, 0x3f	; 63
 ab4:	f8 94       	cli
 ab6:	fa 9a       	sbi	0x1f, 2	; 31
 ab8:	f9 9a       	sbi	0x1f, 1	; 31
 aba:	0f be       	out	0x3f, r0	; 63
 abc:	01 96       	adiw	r24, 0x01	; 1
 abe:	08 95       	ret

00000ac0 <_exit>:
 ac0:	f8 94       	cli

00000ac2 <__stop_program>:
 ac2:	ff cf       	rjmp	.-2      	; 0xac2 <__stop_program>
